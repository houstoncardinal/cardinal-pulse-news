import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { articleId, title, content, category } = await req.json();
    
    if (!articleId || !title) {
      throw new Error('Article ID and title are required');
    }

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    // Create a powerful, journalistic image prompt with detailed context
    const excerpt = content?.substring(0, 500) || '';
    const imagePrompt = `Create a photorealistic, professional news photograph for this article:

HEADLINE: "${title}"
CATEGORY: ${category || 'News'}
ARTICLE CONTEXT: ${excerpt}

REQUIREMENTS:
- The image MUST directly illustrate the main subject or event described in the headline and article
- Use photojournalistic style: realistic, dramatic, high-quality editorial photography
- 16:9 aspect ratio for hero image placement
- Cinematic lighting and composition suitable for premium news publication
- NO text, logos, or graphics overlaid on the image
- Focus on capturing the essence and emotion of the story
- Ultra high resolution, professional grade

Generate an image that a reader would immediately recognize as related to this specific news story.`;

    console.log('Generating image with prompt:', imagePrompt);

    // Call Lovable AI to generate the image
    const aiResponse = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash-image-preview",
        messages: [
          {
            role: "user",
            content: imagePrompt
          }
        ],
        modalities: ["image", "text"]
      })
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI API error:', aiResponse.status, errorText);
      throw new Error(`AI generation failed: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const imageBase64Url = aiData.choices?.[0]?.message?.images?.[0]?.image_url?.url;
    
    if (!imageBase64Url) {
      throw new Error('No image generated by AI');
    }

    // Extract base64 data
    const base64Data = imageBase64Url.split(',')[1];
    const imageBuffer = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Generate descriptive filename
    const sanitizedTitle = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '')
      .substring(0, 50);
    const timestamp = Date.now();
    const filename = `${sanitizedTitle}-${timestamp}.png`;
    const filePath = `articles/${filename}`;

    // Upload to Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('article-images')
      .upload(filePath, imageBuffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('Storage upload error:', uploadError);
      throw new Error(`Failed to upload image: ${uploadError.message}`);
    }

    // Get public URL
    const { data: { publicUrl } } = supabase.storage
      .from('article-images')
      .getPublicUrl(filePath);

    // Update article with generated image
    const { error: updateError } = await supabase
      .from('articles')
      .update({
        featured_image: publicUrl,
        image_url: publicUrl,
        image_credit: 'AI Generated by Cardinal News (Google Gemini)',
        og_image: publicUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', articleId);

    if (updateError) {
      console.error('Article update error:', updateError);
      throw new Error(`Failed to update article: ${updateError.message}`);
    }

    console.log('Image generated and stored successfully:', publicUrl);

    return new Response(
      JSON.stringify({
        success: true,
        imageUrl: publicUrl,
        filename: filename,
        credit: 'AI Generated by Cardinal News (Google Gemini)'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-article-image:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    const errorDetails = error instanceof Error ? error.toString() : String(error);
    
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: errorDetails
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
